# Cont. Pirámides y Lexis


## Instalación local de los paquetes

Antes de empezar esta práctica descargá los siguientes archivos de la carpeta paquetes [aquí](https://www.dropbox.com/scl/fo/l1gnpwreoylsjvaz4tpb0/AMsX4OjReKr6eZNQgVo8ue8?rlkey=5b5kur9jdc2sg86k8fetgvl1v&dl=0). 

Colocala en tu directorio del proyecto. 

Descargá esté [código](https://www.dropbox.com/scl/fi/l1sptnl26hwnfdc6czs2t/Paquetes.R?rlkey=qlyoqjewg83qc75dweh7jhsri&dl=0) y correlo.

> esto es un problema de IP que tenemos en el curso, si trabajás desde tu casa esto no será problema.

# Paquetes

```{r}
if (!require("pacman")) install.packages("pacman") # instala pacman si se requiere
pacman::p_load(tidyverse,
               readxl, 
               writexl,
               janitor,
               remotes,
               wppExplorer,
               apyramid,
               magrittr,
               fmsb,
               DemoTools, 
               wpp2022,
               LexisPlotR) 
```
# Datos 

Rehacemos un poco lo que teníamos del día de ayer:


```{r}
sv1992<-readxl::read_excel("datos/censos_p2.xlsx", sheet = "El Salvador 1992") %>% 
  janitor::clean_names() %>% #
  dplyr::mutate(total=male + female) %>% # ojo
  dplyr::mutate(age=as.numeric(age)) #ojo
```

Los datos para las pirámides
```{r}
data("popAge5dt") 
data("popprojAge5dt")
```

```{r}
pob_uy_long<-popAge1dt %>% 
  dplyr::filter(name=="Uruguay") %>% 
  dplyr::mutate(eda5=cut(age, # la variable a cortar
                  breaks=seq(0,110, # El rango válido
                             by=5), # El ancho del intervalo
                  include.lowest=T, # para que incluya el valor más bajo dentro del intervalo
                  right=F)) %>%
  tidyr::pivot_longer(cols = popM:popF,
                      values_to = "poblacion",
                      names_to = "sexo") %>% 
  dplyr::select(-pop) # checa este tipo de "anti-selección"
```

# Pendientes 

## `{DemoTools}`

Con este paquete también podemos hacer evaluaciones, pero podemos hacer índices más complejos.

Trabaja con vectores individuales.

### Whipple

```{r}
check_heaping_whipple(Value=sv1992$total,
                      Age= sv1992$age, 
                      ageMin = 25, 
                      ageMax = 60, 
                      digit = c(0, 5))


```

### Noumbissi

```{r}


check_heaping_noumbissi(sv1992$male, 
                        Age=sv1992$age, 
                        ageMin = 30, 
                        ageMax = 60,
                        digit = 0)
```

Mayor a 1, el dígito atrae; menor que 1, el índice "repele"

Vamos a hacer un "loop"

```{r}
# Para todos los dígitos

for(i in 0:2){
  Ni<-check_heaping_noumbissi(sv1992$total,
                              sv1992$age, 
                              ageMin = 30+i, # ojo
                              ageMax = 60+i, 
                              digit = i)
  names(Ni)<-i
  print(Ni)
}

for(i in 3:9) {
  Ni<-check_heaping_noumbissi(sv1992$total,
                              sv1992$age, 
                              ageMin = 20+i, #ojo
                              ageMax = 50+i, 
                              digit = i)
  names(Ni)<-i
  print(Ni)
}

```

### Spoorrenberg

```{r}
check_heaping_spoorenberg(sv1992$total, 
                          sv1992$age, 
                          ageMin = 23, 
                          ageMax = 62)
```

### Indice de Myers

```{r}
check_heaping_myers(Value = sv1992$male,
                    Age = sv1992$age, 
                    ageMin = 10, 
                    ageMax = 89, 
                    method = "pasex")
```


## Paquete `{apyramid}`

-   Necesita que tengamos los datos quinquenales.

-   No acepta funciones en las variables edad y sexo

```{r}
pob_uy_long %>% 
  filter(year==2020) %>% 
  count(eda5, sexo, wt=poblacion)

pob_uy_long %>% 
  filter(year==2020) %>% 
  count(eda5, sexo, wt=poblacion) %>% 
  apyramid::age_pyramid(age_group = eda5, 
                        split_by = sexo, 
                        count = n)

```

Nos ahorra un par de pasos, pero siempre tenemos que solucionar algunos elementos

### Momento de práctica

Haz una pirámide para otro país, para el año 2040 en escenario de alta fecundidad.


### Opcional

Veamos como hacemos un *loop* para hacer varias pirámides, pero antes tenemos que arreglar un poco esa base que bajamos de WPP

```{r}

#popAge5dt <- popAge5dt
popAge5dt  %<>% # checa este pipe
  mutate(edad=parse_number(age)) %>% 
  mutate(edad_factor=as.factor(edad))



popAge5dt %<>% 
  pivot_longer(cols=popM:pop, 
               names_to = "sex",
               values_to = "poblacion") %>% 
  mutate(sex=str_replace_all(sex,"popF", "Mujeres")) %>% 
  mutate(sex=str_replace_all(sex,"popM", "Hombres")) %>% 
  mutate(sex=str_replace_all(sex,"pop", "Total")) 

```

El loop:

```{r}
anios<-unique(popAge5dt$year)
pais<-c(858, 222, 320, 340, 484, 1830)
# uy: 858
# sv: 222 
# gt: 320
# hn: 340
# mx: 484
# CA: 916
# LAC: 1830)

# Este es el loop donde reemplaza por i cada código de país
for (i in pais){
  
  popAge5dt %>% 
    mutate(poblacion=poblacion/1000) %>% 
    filter(country_code==i) %>% 
    filter(!sex=="Total") %>% 
    filter(year==2020) %>% 
    age_pyramid(edad_factor, # edad
                split_by = sex,
                count=poblacion)+  
    labs(x="edad",
         y="millones de personas", 
         title = paste0(popAge5dt[popAge5dt$country_code==i,]$name),
         fill="Sexo")->g
  
   ggsave(plot=g, 
          filename=paste0("pira",i,".png", sep=""),
          width=9,
          height=7)
  
  g 
  assign(paste0("pira",i, sep=""), g)
  
}


```

### Momento de práctica

Haz un loop para hacer las pirámides de las proyecciones de uruguay, una para cada año.


## Diagrama de Lexis

El paquete fue creado Philipp Ottolinger, este ejercicio es una versión en español (con algunos comentarios) de su ejemplo <https://github.com/ottlngr/LexisPlotR>

### Dibujar una cuadrícula

Este paquete nos puede ayudar a hacer nuestras cuadrículas. Ponemos los años de inicio y de final; así como las edades de inicio y de final. Recuerda que un diagrama de Lexis debe tener una misma escala en los ejes.

```{r}
# Dibuje una cuadrícula de Lexis desde el año 2010 hasta el año 2015, que representa las edades de 0 a 5 años.
LexisPlotR::lexis_grid(year_start = 2010, 
                        year_end = 2015, 
                        age_start = 0,
                        age_end=5)
 
 
LexisPlotR::lexis_grid(year_start = 1920, 
                        year_end = 2020, 
                        age_start = 0,
                        age_end = 100, 
                        delta = 10)

```

Aunque no necesariamente podemos dibujar sólo cuadrados

```{r}
# Dibuje una cuadrícula de Lexis desde el año 2010 hasta el año 2015, que representa las edades de 0 a 7 años.

lexis_grid(year_start = 2010, year_end = 2015, age_start = 0, age_end = 7)

```

Si no ponemos nada especifico en un argumento "d=", asume que los deltas son de un año. Pero lo podemos modificar

```{r}
lexis_grid(year_start = 1950, year_end = 2000, age_start = 0, age_end = 50, delta = 5)

```

### Sombreados en el diagrama

Lo más fácil es crear un objeto primero con nuestra cuadrícula sobre la cual graficaremos los elementos del Lexis

```{r}
mi_diagrama <- lexis_grid(year_start = 1995, year_end = 2000, age_start = 0, age_end = 5)

```

```{r}
mi_diagrama
```

Para poder sombrear áreas con este paquete, debemos tener un diagrama ya guardado como objeto. Con distintas funciones vamos sombreando áreas.

#### Edad

```{r}
# Destacar todos los puntos que pertenecen a la edad de 2 años
mi_diagrama %>% 
  lexis_age( age = 2)

```

¿Qué tipo de observación o estudio sería este?

Para cambiar el color:

```{r}
mi_diagrama %>% 
  lexis_age(age = 2, fill = "red", alpha = 0.5)
```

#### Periodo

También podemos sombrear períodos

```{r}
mi_diagrama %>% 
  lexis_year(year=1998)

```

¿Qué tipo de observación o estudio sería este?

Para cambiar el color:
[Más info del color ](https://r-charts.com/es/colores/)

```{r}
mi_diagrama %>% 
  lexis_year(year=1998, fill = "grey70", alpha = 0.5)
```

#### Cohorte

```{r}
lexis_cohort(lg = mi_diagrama, cohort=1994)
```

¿Qué tipo de observación o estudio sería este?

También podemos cambiar el color y la transparencia:

```{r}
lexis_cohort(lg = mi_diagrama, cohort=1994, fill="plum1", alpha=0.8)
```

#### Líneas de vida

Alguien entra

```{r}
lexis_lifeline(lg = mi_diagrama, birth = "1996-09-23")

```

Alguien entra y sale

```{r}
lexis_lifeline(lg = mi_diagrama, birth =  "1996-09-23", exit="1999-09-23")

```

#### Polígonos

No es tan sencillo, pero podemos dibujar un espacio "APC", o varios.

```{r}

polygons <- data.frame(group = c(1,
                                 1,
                                 1), # es un triángulo
                       x = c("1996-01-01", 
                             "1997-01-01", 
                             "1997-01-01"), # van en fechas
                       y = c(1,
                             1,
                             2)) # van en edades

mi_diagrama %>% 
  lexis_polygon(x = polygons$x,
                y = polygons$y, 
                group = polygons$group)
```

checa que básicamente se trata de colocar los puntos que dibujan el polígono. Son tres puntos:

1.  Fecha: "1996-01-01", edad=1

2.  Fecha: "1997-01-01", edad=1

3.  Fecha: "1997-01-01", edad=2

Si queremos más triángulos, podemos agregarlos en el mismo objeto:

```{r}

polygons <- data.frame(group = c(1,
                                 1,
                                 1, # es un triángulo
                                 2, 
                                 2,
                                 2), # es otro triángulo
                       x = c("1996-01-01", 
                             "1997-01-01", 
                             "1997-01-01", # van en fechas 1
                             "1998-01-01", 
                             "1998-01-01", 
                             "1999-01-01"), # van en fechas 2
                       y = c(1,
                             1,
                             2, # van en edades 1
                             3,
                             4,
                             4))# van en edades 2

mi_diagrama %>% 
  lexis_polygon( x = polygons$x,
                 y = polygons$y, 
                 group = polygons$group)
```

#### Todo en uno

Podemos ir reescribiendo nuestro objeto

```{r}
lexis_grid(year_start = 1995, year_end = 2000, age_start = 0, age_end = 5) %>%
  lexis_age(age = 2, fill = "red", alpha = 0.5) %>% 
  lexis_year(year = 1998) %>% 
  lexis_cohort(cohort=1994) %>% 
  lexis_lifeline(birth = "1996-09-23", exit="1999-09-23")
```

#### Anotación manual

Para hacer cuadrados

```{r}
mi_diagrama  + # ojo este siguiente comando es ggplot
   annotate("rect", 
            xmin = as.Date("1996-01-01"),
            xmax = as.Date("1997-01-01"), 
            ymin = 0, ymax = 1, alpha = .2)
```

¿Qué tipo de observación es esta?

Si quisiéramos gráficar la fecha de un censo:

```{r}
mi_diagrama  + 
   geom_vline(xintercept = as.Date("1995-11-05"), colour = "red")
```

Si queremos poner una edad exacta:

```{r}
mi_diagrama  + 
   geom_hline(yintercept = 4, colour = "red")
```

### Momento de práctica

Hacé un diagrama de Lexis decenal desde tu quinquenio de nacimiento hasta 2025, gráfica tu línea de vida y otros elementos o etapas importantes de tu vida




## Tasas de crecimiento

### Fechas censales y tasas de crecimiento

```{r}
censos <- readxl::read_excel("datos/censos.xlsx", 
                     col_types = c("numeric","date", "numeric"))


```

Un elemento fundamental es encontrar los periodos intercensales en años. Los censos tienen diferentes fechas.

```{r}
censos %<>%
    dplyr::mutate(dias = c(NA, diff(fecha))) %>% 
    dplyr::mutate(n=dias/365) %>% 
  clean_names()

censos  

```

Con esta base ya podemos ir calculando diferentes tipos de crecimiento básicos.

### Ritmo

$$ ritmo=\frac{P_{t+n}}{P_t} $$

```{r}
censos<-censos %>% 
   mutate(ritmo = poblacion/lag(poblacion))
censos
```

### Crecimiento

$$ c=\frac{P_{t+n}-{P_t}}{P_t} =\frac{P_{t+n}}{P_t}-1 $$

Básicamente es el ritmo menos 1

```{r}
censos<-censos %>% 
   mutate(c = ritmo-1)
censos
```

### Crecimiento aritmético

$$ r_a=\frac{P_{t+n}-{P_t}}{n*P_t} =\frac{c}n $$ Básicamente es el crecimiento entre el periodo intercensal.

```{r}
censos<-censos %>% 
   mutate(ra = c/n)
censos
```

### Crecimiento geométrico

$$ r_g=\sqrt[n]\frac{P_{t+n}}{{P_t}}-1 $$ 

Es la raíz n-ésima del ritmo menos 1

```{r}
censos<-censos %>% 
   mutate(rg = ritmo^(1/n)-1)
censos
```

### Crecimiento exponencial

$$ r=\frac{ln\frac{P_{t+n}}{{P_t}}}n$$

Básicamente es logaritmo del ritmo entre n

```{r}
censos<-censos %>% 
   mutate(r = log(ritmo)/n)
censos
```

Este crecimiento es el más utilizado.

Podemos graficar los diferentes crecimientos, será más fácil si cambiamos el formato

```{r}
censos %>% 
  select(c(ano, ra, rg, r)) %>% 
  pivot_longer(-ano, names_to = "tipo", values_to = "crecimiento") 
  
```

```{r}
censos %>% 
  select(c(ano, ra, rg, r)) %>% 
  pivot_longer(-ano, names_to = "tipo", values_to = "crecimiento") %>% 
  ggplot(aes(ano,crecimiento, group=tipo, color=tipo)) + 
  geom_line() + theme_minimal()
           
```

Con estas tasas de crecimiento también podemos hacer estimaciones de tiempo y de poblaciones en fechas específicas.

### Proyeccion

$$ P_{t+n}= P_t * e^{nr} $$ Vamos a proyectar la población al primero de julio de 2009

```{r}
n<-difftime(as.Date("2009-07-1"),
        as.Date(paste(censos[censos$ano==2006,]$fecha)))
n

n<-as.numeric(n/365)

n
```

```{r}
censos[censos$ano==2006, "poblacion"]
censos[censos$ano==2006, "r"]

ptn<- censos[censos$ano==2006,"poblacion"]*exp(n*censos[censos$ano==2006, "r"])

paste(ptn) # para ver los decimales
```

Con esto podemos crear una función:
[debes tener los datos de censo con las estimaciones de r]
```{r}
pob_estim <- function(fecha,ano) {
  
    n<-difftime(as.Date(fecha),
            as.Date(paste(censos[censos$ano==ano,]$fecha)))
    n<-as.numeric(n/365)
    ptn<-censos[censos$ano==ano,"poblacion"]*exp(n*censos[censos$ano==ano, "r"])
  
  return(ptn)

}
```

```{r}
pob_estim(fecha ="2008-01-07", 
          ano = 2006)
```


### Tiempo

$$ n=\frac{ln\frac{P_{t+n}}{{P_t}}}r$$

¿Cuánto tiempo tardaría en duplicarse la población del último censo?

```{r}
n_calc<-log(2*censos[censos$ano==2011,"poblacion"]/censos[censos$ano==2011,"poblacion"])/censos[censos$ano==2011,"r"]
n_calc


```


